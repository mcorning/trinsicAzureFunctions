"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var msRest = require("@azure/ms-rest-js");
var Models = require("./models");
exports.CustodianServiceModels = Models;
var Mappers = require("./models/mappers");
exports.CustodianServiceMappers = Mappers;
var Parameters = require("./models/parameters");
var custodianServiceClientContext_1 = require("./custodianServiceClientContext");
exports.CustodianServiceClientContext = custodianServiceClientContext_1.CustodianServiceClientContext;
var CustodianServiceClient = /** @class */ (function (_super) {
    __extends(CustodianServiceClient, _super);
    /**
     * Initializes a new instance of the CustodianServiceClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    function CustodianServiceClient(credentials, options) {
        return _super.call(this, credentials, options) || this;
    }
    CustodianServiceClient.prototype.acceptInvitation = function (walletId, invitation, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            invitation: invitation,
            options: options
        }, acceptInvitationOperationSpec, callback);
    };
    CustodianServiceClient.prototype.getConnection = function (walletId, connectionId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            connectionId: connectionId,
            options: options
        }, getConnectionOperationSpec, callback);
    };
    CustodianServiceClient.prototype.getConnections = function (walletId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            options: options
        }, getConnectionsOperationSpec, callback);
    };
    CustodianServiceClient.prototype.getInvitations = function (walletId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            options: options
        }, getInvitationsOperationSpec, callback);
    };
    CustodianServiceClient.prototype.listCredentialsForConnectionId = function (walletId, connectionId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            connectionId: connectionId,
            options: options
        }, listCredentialsForConnectionIdOperationSpec, callback);
    };
    CustodianServiceClient.prototype.listCredentials = function (walletId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            options: options
        }, listCredentialsOperationSpec, callback);
    };
    CustodianServiceClient.prototype.acceptCredentialOffer = function (walletId, credentialId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            credentialId: credentialId,
            options: options
        }, acceptCredentialOfferOperationSpec, callback);
    };
    CustodianServiceClient.prototype.getCredential = function (walletId, credentialId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            credentialId: credentialId,
            options: options
        }, getCredentialOperationSpec, callback);
    };
    CustodianServiceClient.prototype.listVerificationsForConnection = function (walletId, connectionId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            connectionId: connectionId,
            options: options
        }, listVerificationsForConnectionOperationSpec, callback);
    };
    CustodianServiceClient.prototype.listWallets = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listWalletsOperationSpec, callback);
    };
    CustodianServiceClient.prototype.createWallet = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, createWalletOperationSpec, callback);
    };
    CustodianServiceClient.prototype.deleteWallet = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, deleteWalletOperationSpec, callback);
    };
    CustodianServiceClient.prototype.listVerifications = function (walletId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            options: options
        }, listVerificationsOperationSpec, callback);
    };
    CustodianServiceClient.prototype.submitVerificationAutoSelect = function (walletId, verificationId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            verificationId: verificationId,
            options: options
        }, submitVerificationAutoSelectOperationSpec, callback);
    };
    CustodianServiceClient.prototype.submitVerification = function (walletId, verificationId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            verificationId: verificationId,
            options: options
        }, submitVerificationOperationSpec, callback);
    };
    CustodianServiceClient.prototype.getVerification = function (walletId, verificationId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            verificationId: verificationId,
            options: options
        }, getVerificationOperationSpec, callback);
    };
    CustodianServiceClient.prototype.getAvailableCredentialsForVerification = function (walletId, verificationId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            verificationId: verificationId,
            options: options
        }, getAvailableCredentialsForVerificationOperationSpec, callback);
    };
    return CustodianServiceClient;
}(custodianServiceClientContext_1.CustodianServiceClientContext));
exports.CustodianServiceClient = CustodianServiceClient;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var acceptInvitationOperationSpec = {
    httpMethod: "POST",
    path: "custodian/v1/api/{walletId}/connections/invitation",
    urlParameters: [
        Parameters.walletId0
    ],
    formDataParameters: [
        Parameters.invitation
    ],
    contentType: "multipart/form-data",
    responses: {
        200: {
            bodyMapper: Mappers.ConnectionContract
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getConnectionOperationSpec = {
    httpMethod: "GET",
    path: "custodian/v1/api/{walletId}/connections/{connectionId}",
    urlParameters: [
        Parameters.walletId0,
        Parameters.connectionId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ConnectionContract
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getConnectionsOperationSpec = {
    httpMethod: "GET",
    path: "custodian/v1/api/{walletId}/connections",
    urlParameters: [
        Parameters.walletId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectionContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getInvitationsOperationSpec = {
    httpMethod: "GET",
    path: "custodian/v1/api/{walletId}/connections/invitations",
    urlParameters: [
        Parameters.walletId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectionContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var listCredentialsForConnectionIdOperationSpec = {
    httpMethod: "GET",
    path: "custodian/v1/api/{walletId}/credentials/connection/{connectionId}",
    urlParameters: [
        Parameters.walletId0,
        Parameters.connectionId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CredentialContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var listCredentialsOperationSpec = {
    httpMethod: "GET",
    path: "custodian/v1/api/{walletId}/credentials",
    urlParameters: [
        Parameters.walletId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CredentialContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var acceptCredentialOfferOperationSpec = {
    httpMethod: "POST",
    path: "custodian/v1/api/{walletId}/credentials/{credentialId}",
    urlParameters: [
        Parameters.walletId0,
        Parameters.credentialId
    ],
    responses: {
        200: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getCredentialOperationSpec = {
    httpMethod: "GET",
    path: "custodian/v1/api/{walletId}/credentials/{credentialId}",
    urlParameters: [
        Parameters.walletId0,
        Parameters.credentialId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CredentialContract
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var listVerificationsForConnectionOperationSpec = {
    httpMethod: "GET",
    path: "custodian/v1/api/{walletId}/verifications/connection/{connectionId}",
    urlParameters: [
        Parameters.walletId0,
        Parameters.connectionId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VerificationContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var listWalletsOperationSpec = {
    httpMethod: "GET",
    path: "custodian/v1/api/wallets",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustodianWalletContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var createWalletOperationSpec = {
    httpMethod: "POST",
    path: "custodian/v1/api/wallets",
    requestBody: {
        parameterPath: [
            "options",
            "walletParameters"
        ],
        mapper: Mappers.WalletParameters
    },
    responses: {
        200: {
            bodyMapper: Mappers.CustodianWalletContract
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var deleteWalletOperationSpec = {
    httpMethod: "DELETE",
    path: "custodian/v1/api/wallets",
    queryParameters: [
        Parameters.walletId1
    ],
    responses: {
        200: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var listVerificationsOperationSpec = {
    httpMethod: "GET",
    path: "custodian/v1/api/{walletId}/verifications",
    urlParameters: [
        Parameters.walletId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VerificationContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var submitVerificationAutoSelectOperationSpec = {
    httpMethod: "PUT",
    path: "custodian/v1/api/{walletId}/verifications/{verificationId}/autoSelect",
    urlParameters: [
        Parameters.walletId0,
        Parameters.verificationId
    ],
    responses: {
        200: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var submitVerificationOperationSpec = {
    httpMethod: "PUT",
    path: "custodian/v1/api/{walletId}/verifications/{verificationId}",
    urlParameters: [
        Parameters.walletId0,
        Parameters.verificationId
    ],
    requestBody: {
        parameterPath: [
            "options",
            "verificationPolicyCredentialParametersArray"
        ],
        mapper: {
            serializedName: "verificationPolicyCredentialParametersArray",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "VerificationPolicyCredentialParameters"
                    }
                }
            }
        }
    },
    responses: {
        200: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getVerificationOperationSpec = {
    httpMethod: "GET",
    path: "custodian/v1/api/{walletId}/verifications/{verificationId}",
    urlParameters: [
        Parameters.walletId0,
        Parameters.verificationId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VerificationContract
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getAvailableCredentialsForVerificationOperationSpec = {
    httpMethod: "GET",
    path: "custodian/v1/api/{walletId}/verifications/{verificationId}/availableCredentials",
    urlParameters: [
        Parameters.walletId0,
        Parameters.verificationId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VerificationPolicyCredentialContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
