import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { CustodianServiceClientContext } from "./custodianServiceClientContext";
declare class CustodianServiceClient extends CustodianServiceClientContext {
    /**
     * Initializes a new instance of the CustodianServiceClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials, options?: Models.CustodianServiceClientOptions);
    /**
     * More details about what it means to accept an invitation can be found within the <a
     * href="https://github.com/hyperledger/aries-rfcs/blob/master/features/0160-connection-protocol/README.md#0-invitation-to-connect">Aries
     * Connection Protocol </a>
     * @summary Accept an invitation
     * @param walletId The wallet Id
     * @param invitation
     * @param [options] The optional parameters
     * @returns Promise<Models.AcceptInvitationResponse>
     */
    acceptInvitation(walletId: string, invitation: string, options?: msRest.RequestOptionsBase): Promise<Models.AcceptInvitationResponse>;
    /**
     * @param walletId The wallet Id
     * @param invitation
     * @param callback The callback
     */
    acceptInvitation(walletId: string, invitation: string, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * @param walletId The wallet Id
     * @param invitation
     * @param options The optional parameters
     * @param callback The callback
     */
    acceptInvitation(walletId: string, invitation: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * Related: <a href="https://docs.streetcred.id/docs/connections"> Guide to Connections </a>
     * @summary Get connection by ID
     * @param walletId
     * @param connectionId The connection identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetConnectionResponse>
     */
    getConnection(walletId: string, connectionId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetConnectionResponse>;
    /**
     * @param walletId
     * @param connectionId The connection identifier.
     * @param callback The callback
     */
    getConnection(walletId: string, connectionId: string, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * @param walletId
     * @param connectionId The connection identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    getConnection(walletId: string, connectionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * Retrieves a list of connections that are in 'Connected' state.
     * @summary Get list of connections.
     * @param walletId
     * @param [options] The optional parameters
     * @returns Promise<Models.GetConnectionsResponse>
     */
    getConnections(walletId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetConnectionsResponse>;
    /**
     * @param walletId
     * @param callback The callback
     */
    getConnections(walletId: string, callback: msRest.ServiceCallback<Models.ConnectionContract[]>): void;
    /**
     * @param walletId
     * @param options The optional parameters
     * @param callback The callback
     */
    getConnections(walletId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionContract[]>): void;
    /**
     * Get list of invitations.
     * @summary Get list of invitations.
     * @param walletId The wallet identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.GetInvitationsResponse>
     */
    getInvitations(walletId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetInvitationsResponse>;
    /**
     * @param walletId The wallet identifier
     * @param callback The callback
     */
    getInvitations(walletId: string, callback: msRest.ServiceCallback<Models.ConnectionContract[]>): void;
    /**
     * @param walletId The wallet identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    getInvitations(walletId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionContract[]>): void;
    /**
     * Lists the credentials for a connection identifier.
     * @summary Lists the credentials for a connection identifier.
     * @param walletId
     * @param connectionId The connection identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListCredentialsForConnectionIdResponse>
     */
    listCredentialsForConnectionId(walletId: string, connectionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListCredentialsForConnectionIdResponse>;
    /**
     * @param walletId
     * @param connectionId The connection identifier.
     * @param callback The callback
     */
    listCredentialsForConnectionId(walletId: string, connectionId: string, callback: msRest.ServiceCallback<Models.CredentialContract[]>): void;
    /**
     * @param walletId
     * @param connectionId The connection identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    listCredentialsForConnectionId(walletId: string, connectionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialContract[]>): void;
    /**
     * Lists the credentials.
     * @summary Lists the credentials.
     * @param walletId
     * @param [options] The optional parameters
     * @returns Promise<Models.ListCredentialsResponse>
     */
    listCredentials(walletId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListCredentialsResponse>;
    /**
     * @param walletId
     * @param callback The callback
     */
    listCredentials(walletId: string, callback: msRest.ServiceCallback<Models.CredentialContract[]>): void;
    /**
     * @param walletId
     * @param options The optional parameters
     * @param callback The callback
     */
    listCredentials(walletId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialContract[]>): void;
    /**
     * Learn more about credentials in <a href="https://docs.streetcred.id/docs/credentials"> our
     * credentials documentation </a>
     * @summary Accepts the credential offer.
     * @param walletId
     * @param credentialId The credential identifier.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    acceptCredentialOffer(walletId: string, credentialId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param walletId
     * @param credentialId The credential identifier.
     * @param callback The callback
     */
    acceptCredentialOffer(walletId: string, credentialId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param walletId
     * @param credentialId The credential identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    acceptCredentialOffer(walletId: string, credentialId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Retrieve the credential details for the given {credentialId}
     * @summary Retrieve the credential details for the given {credentialId}
     * @param walletId The wallet identifier.
     * @param credentialId The credential identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetCredentialResponse>
     */
    getCredential(walletId: string, credentialId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCredentialResponse>;
    /**
     * @param walletId The wallet identifier.
     * @param credentialId The credential identifier.
     * @param callback The callback
     */
    getCredential(walletId: string, credentialId: string, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
    /**
     * @param walletId The wallet identifier.
     * @param credentialId The credential identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    getCredential(walletId: string, credentialId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
    /**
     * Lists the verifications for connection.
     * @summary Lists the verifications for connection.
     * @param walletId
     * @param connectionId The connection identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListVerificationsForConnectionResponse>
     */
    listVerificationsForConnection(walletId: string, connectionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListVerificationsForConnectionResponse>;
    /**
     * @param walletId
     * @param connectionId The connection identifier.
     * @param callback The callback
     */
    listVerificationsForConnection(walletId: string, connectionId: string, callback: msRest.ServiceCallback<Models.VerificationContract[]>): void;
    /**
     * @param walletId
     * @param connectionId The connection identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    listVerificationsForConnection(walletId: string, connectionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract[]>): void;
    /**
     * Lists all custodian wallets
     * @summary Lists all custodian wallets
     * @param [options] The optional parameters
     * @returns Promise<Models.ListWalletsResponse>
     */
    listWallets(options?: msRest.RequestOptionsBase): Promise<Models.ListWalletsResponse>;
    /**
     * @param callback The callback
     */
    listWallets(callback: msRest.ServiceCallback<Models.CustodianWalletContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listWallets(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustodianWalletContract[]>): void;
    /**
     * Create new user wallet
     * @summary Create new user wallet
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateWalletResponse>
     */
    createWallet(options?: Models.CustodianServiceClientCreateWalletOptionalParams): Promise<Models.CreateWalletResponse>;
    /**
     * @param callback The callback
     */
    createWallet(callback: msRest.ServiceCallback<Models.CustodianWalletContract>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    createWallet(options: Models.CustodianServiceClientCreateWalletOptionalParams, callback: msRest.ServiceCallback<Models.CustodianWalletContract>): void;
    /**
     * This will delete all connections, credentials and verification records for this user wallet.
     * @summary Deletes the custodian wallet permanently.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteWallet(options?: Models.CustodianServiceClientDeleteWalletOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param callback The callback
     */
    deleteWallet(callback: msRest.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteWallet(options: Models.CustodianServiceClientDeleteWalletOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get a list of all available verifications for the specified wallet
     * @summary Get a list of all available verifications for the specified wallet
     * @param walletId
     * @param [options] The optional parameters
     * @returns Promise<Models.ListVerificationsResponse>
     */
    listVerifications(walletId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListVerificationsResponse>;
    /**
     * @param walletId
     * @param callback The callback
     */
    listVerifications(walletId: string, callback: msRest.ServiceCallback<Models.VerificationContract[]>): void;
    /**
     * @param walletId
     * @param options The optional parameters
     * @param callback The callback
     */
    listVerifications(walletId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract[]>): void;
    /**
     * If a credential is not available for a certain policy, that policy will not be included
     * in the submitted verification.
     * @summary Submit verification by automatically selecting available credentials.
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    submitVerificationAutoSelect(walletId: string, verificationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param callback The callback
     */
    submitVerificationAutoSelect(walletId: string, verificationId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    submitVerificationAutoSelect(walletId: string, verificationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Submit verification using the provided policy parameters
     * @summary Submit verification using the provided policy parameters
     * @param walletId
     * @param verificationId
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    submitVerification(walletId: string, verificationId: string, options?: Models.CustodianServiceClientSubmitVerificationOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param walletId
     * @param verificationId
     * @param callback The callback
     */
    submitVerification(walletId: string, verificationId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param walletId
     * @param verificationId
     * @param options The optional parameters
     * @param callback The callback
     */
    submitVerification(walletId: string, verificationId: string, options: Models.CustodianServiceClientSubmitVerificationOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * Retrieve a verification with the given identifier.
     * @summary Retrieve a verification with the given identifier.
     * @param walletId The wallet identifier.
     * @param verificationId The verification identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetVerificationResponse>
     */
    getVerification(walletId: string, verificationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetVerificationResponse>;
    /**
     * @param walletId The wallet identifier.
     * @param verificationId The verification identifier.
     * @param callback The callback
     */
    getVerification(walletId: string, verificationId: string, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param walletId The wallet identifier.
     * @param verificationId The verification identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    getVerification(walletId: string, verificationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * Get a list of available credentials for a given verification
     * @summary Get a list of available credentials for a given verification
     * @param walletId
     * @param verificationId
     * @param [options] The optional parameters
     * @returns Promise<Models.GetAvailableCredentialsForVerificationResponse>
     */
    getAvailableCredentialsForVerification(walletId: string, verificationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetAvailableCredentialsForVerificationResponse>;
    /**
     * @param walletId
     * @param verificationId
     * @param callback The callback
     */
    getAvailableCredentialsForVerification(walletId: string, verificationId: string, callback: msRest.ServiceCallback<Models.VerificationPolicyCredentialContract[]>): void;
    /**
     * @param walletId
     * @param verificationId
     * @param options The optional parameters
     * @param callback The callback
     */
    getAvailableCredentialsForVerification(walletId: string, verificationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationPolicyCredentialContract[]>): void;
}
export { CustodianServiceClient, CustodianServiceClientContext, Models as CustodianServiceModels, Mappers as CustodianServiceMappers };
