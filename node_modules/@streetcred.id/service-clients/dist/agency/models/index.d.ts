import { ServiceClientOptions } from "@azure/ms-rest-js";
import * as msRest from "@azure/ms-rest-js";
/**
 * An interface representing NetworkContract.
 */
export interface NetworkContract {
    networkId?: string;
    networkName?: string;
    genesisTransactions?: string;
    poolProtocolVersion?: number;
}
/**
 * Transaction author agreement
 */
export interface NetworkTxnAgreementContract {
    /**
     * Acceptance agreement text
     */
    text?: string;
    /**
     * Agreement version
     */
    version?: string;
    /**
     * List of agreement acceptance methods
     */
    acceptanceMethods?: {
        [propertyName: string]: string;
    };
}
/**
 * An interface representing AgentEndpoint.
 */
export interface AgentEndpoint {
    /**
     * **NOTE: This property will not be serialized. It can only be populated by the server.**
     */
    readonly did?: string;
    /**
     * **NOTE: This property will not be serialized. It can only be populated by the server.**
     */
    readonly verkey?: string[];
    /**
     * **NOTE: This property will not be serialized. It can only be populated by the server.**
     */
    readonly uri?: string;
}
/**
 * An interface representing ConnectionContract.
 */
export interface ConnectionContract {
    connectionId?: string;
    name?: string;
    imageUrl?: string;
    myDid?: string;
    theirDid?: string;
    myKey?: string;
    theirKey?: string;
    /**
     * Possible values include: 'Invited', 'Negotiating', 'Connected'
     */
    state?: State;
    invitation?: string;
    invitationUrl?: string;
    endpoint?: AgentEndpoint;
    createdAtUtc?: Date;
    multiParty?: boolean;
}
/**
 * Connection invitation parameters
 */
export interface ConnectionInvitationParameters {
    /**
     * Unique connection identifier. If not specified, a random one will be generated.
     */
    connectionId?: string;
    /**
     * If set to 'true', the invitation can be used by multiple parties and will always have the
     * status set to 'Invited'.
     * When a party accepts this invitation, a new connection record with a unique identifier will be
     * created.
     *
     * Default value is 'false'.
     */
    multiParty?: boolean;
    /**
     * Name that can be used as organization name
     *
     * Default value is 'null'.
     */
    name?: string;
}
/**
 * An interface representing CredentialContract.
 */
export interface CredentialContract {
    credentialId?: string;
    /**
     * Possible values include: 'Offered', 'Requested', 'Issued', 'Rejected', 'Revoked'
     */
    state?: State1;
    connectionId?: string;
    definitionId?: string;
    schemaId?: string;
    offerData?: string;
    offerUrl?: string;
    issuedAtUtc?: Date;
    acceptedAtUtc?: Date;
    values?: {
        [propertyName: string]: string;
    };
}
/**
 * Send offer.
 */
export interface CredentialOfferParameters {
    /**
     * Gets or sets the credential definition identifier.
     */
    definitionId: string;
    /**
     * Connection identifier to send this credential to.
     * If ommited, the request will be treated as connectionless
     * issuance and will generate a URL.
     */
    connectionId?: string;
    /**
     * If true, the credential will automatically be issued once the individual accepts the offer. If
     * false, when an individual accepts the offer the credential will be in state 'Requested' and
     * must be manually issued using the
     * PUT /credentials/{credentialId} endpoint. This is set to false by default
     */
    automaticIssuance?: boolean;
    credentialValues?: {
        [propertyName: string]: string;
    };
}
/**
 * An interface representing VerificationPolicyRestrictionAttribute.
 */
export interface VerificationPolicyRestrictionAttribute {
    attributeName?: string;
    attributeValue?: string;
}
/**
 * An interface representing VerificationPolicyRestriction.
 */
export interface VerificationPolicyRestriction {
    schemaId?: string;
    schemaIssuerDid?: string;
    schemaName?: string;
    schemaVersion?: string;
    issuerDid?: string;
    credentialDefinitionId?: string;
    value?: VerificationPolicyRestrictionAttribute;
}
/**
 * An interface representing VerificationPolicyAttributeContract.
 */
export interface VerificationPolicyAttributeContract {
    policyName?: string;
    attributeNames?: string[];
    restrictions?: VerificationPolicyRestriction[];
}
/**
 * An interface representing VerificationPolicyPredicateContract.
 */
export interface VerificationPolicyPredicateContract {
    policyName: string;
    attributeName: string;
    predicateType: string;
    predicateValue: number;
    restrictions?: VerificationPolicyRestriction[];
}
/**
 * An interface representing VerificationPolicyRevocationReqirement.
 */
export interface VerificationPolicyRevocationReqirement {
    validAt?: Date;
}
/**
 * An interface representing VerificationPolicyContract.
 */
export interface VerificationPolicyContract {
    policyId?: string;
    name?: string;
    version?: string;
    attributes?: VerificationPolicyAttributeContract[];
    predicates?: VerificationPolicyPredicateContract[];
    revocationRequirement?: VerificationPolicyRevocationReqirement;
}
/**
 * An interface representing VerificationPolicyParameters.
 */
export interface VerificationPolicyParameters {
    name?: string;
    version?: string;
    attributes?: VerificationPolicyAttributeContract[];
    predicates?: VerificationPolicyPredicateContract[];
    revocationRequirement?: VerificationPolicyRevocationReqirement;
}
/**
 * An interface representing CredentialDefinitionContract.
 */
export interface CredentialDefinitionContract {
    name?: string;
    version?: string;
    attributes?: string[];
    supportsRevocation?: boolean;
    maxCredentialCount?: number;
    schemaId?: string;
    definitionId?: string;
}
/**
 * Represents a request object to create new credential definition for an agency
 */
export interface CredentialDefinitionFromSchemaParameters {
    /**
     * Name of the schema.
     */
    name: string;
    /**
     * Schema version.
     */
    version: string;
    /**
     * Schema attribute names.
     */
    attributes: string[];
    /**
     * Support credential revocation
     */
    supportRevocation?: boolean;
    /**
     * Unique tag to differentiate definitions of the same schema
     */
    tag?: string;
}
/**
 * Credential definition parameters
 */
export interface CredentialDefinitionParameters {
    /**
     * Support credential revocation
     */
    supportRevocation?: boolean;
    /**
     * Unique tag to differentiate definitions of the same schema
     */
    tag?: string;
}
/**
 * Schema.
 */
export interface SchemaParameters {
    /**
     * Gets or sets the name.
     */
    name: string;
    /**
     * Gets or sets the version.
     */
    version: string;
    /**
     * Gets or sets the attribute names.
     */
    attributeNames: string[];
}
/**
 * An interface representing SchemaRecord.
 */
export interface SchemaRecord {
    /**
     * **NOTE: This property will not be serialized. It can only be populated by the server.**
     */
    readonly typeName?: string;
    name?: string;
    version?: string;
    attributeNames?: string[];
    id?: string;
    /**
     * **NOTE: This property will not be serialized. It can only be populated by the server.**
     */
    readonly createdAtUtc?: Date;
    /**
     * **NOTE: This property will not be serialized. It can only be populated by the server.**
     */
    readonly updatedAtUtc?: Date;
}
/**
 * An interface representing AttributeValue.
 */
export interface AttributeValue {
    name?: string;
    value?: string;
}
/**
 * An interface representing AttributeFilter.
 */
export interface AttributeFilter {
    schemaId?: string;
    schemaIssuerDid?: string;
    schemaName?: string;
    schemaVersion?: string;
    issuerDid?: string;
    credentialDefinitionId?: string;
    attributeValue?: AttributeValue;
}
/**
 * An interface representing RevocationInterval.
 */
export interface RevocationInterval {
    from?: number;
    to?: number;
}
/**
 * An interface representing ProofAttributeInfo.
 */
export interface ProofAttributeInfo {
    name?: string;
    names?: string[];
    restrictions?: AttributeFilter[];
    nonRevoked?: RevocationInterval;
}
/**
 * An interface representing ProofPredicateInfo.
 */
export interface ProofPredicateInfo {
    predicateType?: string;
    predicateValue?: number;
    name?: string;
    names?: string[];
    restrictions?: AttributeFilter[];
    nonRevoked?: RevocationInterval;
}
/**
 * An interface representing ProofRequest.
 */
export interface ProofRequest {
    name?: string;
    version?: string;
    nonce?: string;
    requestedAttributes?: {
        [propertyName: string]: ProofAttributeInfo;
    };
    requestedPredicates?: {
        [propertyName: string]: ProofPredicateInfo;
    };
    nonRevoked?: RevocationInterval;
}
/**
 * An interface representing VerificationDefinitionContract.
 */
export interface VerificationDefinitionContract {
    /**
     * Gets or sets the identifier.
     */
    id?: string;
    proofRequest?: ProofRequest;
}
/**
 * An interface representing BasicMessageParameters.
 */
export interface BasicMessageParameters {
    connectionId?: string;
    text?: string;
}
/**
 * An interface representing BasicMessageRecord.
 */
export interface BasicMessageRecord {
    /**
     * **NOTE: This property will not be serialized. It can only be populated by the server.**
     */
    readonly typeName?: string;
    connectionId?: string;
    sentTime?: Date;
    /**
     * Possible values include: 'Incoming', 'Outgoing'
     */
    direction?: Direction;
    text?: string;
    id?: string;
    /**
     * **NOTE: This property will not be serialized. It can only be populated by the server.**
     */
    readonly createdAtUtc?: Date;
    /**
     * **NOTE: This property will not be serialized. It can only be populated by the server.**
     */
    readonly updatedAtUtc?: Date;
}
/**
 * An interface representing BasicMessageContract.
 */
export interface BasicMessageContract {
    connectionId?: string;
    timestamp?: Date;
    text?: string;
    /**
     * Possible values include: 'Incoming', 'Outgoing'
     */
    direction?: Direction1;
}
/**
 * Extended tenant information
 */
export interface TenantExtendedInformationContract {
    /**
     * Issuer DID
     */
    issuerDid?: string;
    /**
     * Issuer Public Key
     */
    issuerKey?: string;
    /**
     * Isuser key generation seed used for deterministic key creation (32 characters)
     */
    issuerKeyGenerationSeed?: string;
    /**
     * Agent DID
     */
    agentDid?: string;
    /**
     * Agent Public Key
     */
    agentKey?: string;
    /**
     * Agent key generation seed used for deterministic key creation (32 characters)
     */
    agentKeyGenerationSeed?: string;
    /**
     * Agent service endpoint URL
     */
    agentServiceEndpoint?: string;
    /**
     * Possible values include: 'Shared', 'Dedicated', 'Delegated'
     */
    transactionEndorsement?: TransactionEndorsement;
}
/**
 * Tenant info.
 */
export interface TenantContract {
    /**
     * Gets or sets the name.
     * **NOTE: This property will not be serialized. It can only be populated by the server.**
     */
    readonly name?: string;
    /**
     * Gets or sets the image URI.
     */
    imageUrl?: string;
    network?: NetworkContract;
    /**
     * Gets or sets the tenant identifier.
     * **NOTE: This property will not be serialized. It can only be populated by the server.**
     */
    readonly tenantId?: string;
    extendedInformation?: TenantExtendedInformationContract;
}
/**
 * Configuration options for creating new tenant
 */
export interface TenantParameters {
    /**
     * (Optional) Issuer seed used for deterministic DID generation.
     * If omitted, a random DID/Key is generated
     */
    issuerSeed?: string;
    /**
     * The name of the tenant.
     */
    name: string;
    /**
     * (Optional) Location of image URL used as profile for this tenant
     */
    imageUrl?: string;
    /**
     * (Optional) Ledger network identifier. Default is Sovrin Staging (sovrin-staging)
     */
    networkId?: string;
    /**
     * Possible values include: 'Shared', 'Dedicated', 'Delegated'
     */
    endorserType?: EndorserType;
}
/**
 * Issuer Status contract
 */
export interface IssuerStatusContract {
    /**
     * Transaction Author Agreement Text
     */
    acceptanceText?: string;
    /**
     * Transaction Author Agreement Version
     */
    acceptanceVersion?: string;
    acceptanceDigest?: string;
    acceptanceTime?: number;
    /**
     * Indicates if user needs to accept the
     * latest agreement on the network
     */
    requireAcceptance?: boolean;
    /**
     * Possible values include: 'Shared', 'Dedicated', 'Delegated'
     */
    transactionEndorsement?: TransactionEndorsement1;
    /**
     * Indicates if the user has Endorser status
     */
    issuerCanEndorse?: boolean;
}
/**
 * An interface representing ProofAttributeContract.
 */
export interface ProofAttributeContract {
    name?: string;
    value?: string;
    attributes?: {
        [propertyName: string]: string;
    };
    /**
     * **NOTE: This property will not be serialized. It can only be populated by the server.**
     */
    readonly revealed?: boolean;
    selfAttested?: boolean;
    conditional?: boolean;
}
/**
 * An interface representing VerificationContract.
 */
export interface VerificationContract {
    connectionId?: string;
    verificationId?: string;
    definitionId?: string;
    /**
     * Possible values include: 'Requested', 'Accepted', 'Rejected'
     */
    state?: State2;
    createdAtUtc?: Date;
    updatedAtUtc?: Date;
    isValid?: boolean;
    verifiedAtUtc?: Date;
    proof?: {
        [propertyName: string]: ProofAttributeContract;
    };
    verificationRequestData?: string;
    verificationRequestUrl?: string;
}
/**
 * Create verification
 */
export interface VerificationParameters {
    /**
     * Verification definition identifier.
     */
    verificationDefinitionId: string;
    /**
     * Connection identifier.
     */
    connectionId?: string;
}
/**
 * Verification result
 */
export interface VerificationResult {
    /**
     * True if verification passed, otherwise False
     */
    valid?: boolean;
    /**
     * Verification Proof Details
     */
    proof?: {
        [propertyName: string]: ProofAttributeContract;
    };
}
/**
 * An interface representing WebhookContract.
 */
export interface WebhookContract {
    url?: string;
    /**
     * Possible values include: 'Notification', 'DelegatedEndorser'
     */
    type?: Type;
    enabled?: boolean;
    id?: string;
}
/**
 * An interface representing WebhookParameters.
 */
export interface WebhookParameters {
    url?: string;
    /**
     * Possible values include: 'Notification', 'DelegatedEndorser'
     */
    type?: Type1;
}
/**
 * An interface representing AgencyServiceClientOptions.
 */
export interface AgencyServiceClientOptions extends ServiceClientOptions {
    baseUri?: string;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientUploadImageOptionalParams extends msRest.RequestOptionsBase {
    filename?: string;
    contentType?: string;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientListConnectionsOptionalParams extends msRest.RequestOptionsBase {
    /**
     * Possible values include: 'Invited', 'Negotiating', 'Connected'
     */
    state?: State3;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientCreateConnectionOptionalParams extends msRest.RequestOptionsBase {
    /**
     * Connection invitation parameters
     */
    connectionInvitationParameters?: ConnectionInvitationParameters;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientListCredentialsOptionalParams extends msRest.RequestOptionsBase {
    connectionId?: string;
    /**
     * Possible values include: 'Offered', 'Requested', 'Issued', 'Rejected', 'Revoked'
     */
    state?: State4;
    definitionId?: string;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientCreateCredentialOptionalParams extends msRest.RequestOptionsBase {
    /**
     * The definition and connection to which this offer will be sent.
     */
    credentialOfferParameters?: CredentialOfferParameters;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientIssueCredentialOptionalParams extends msRest.RequestOptionsBase {
    /**
     * If the values offered were incorrect, changes to the values may be made here. You must update
     * all of the values, and they must be follow the same structure of the schema.
     * To keep the values the same as those included in the credential offer, leave the body blank
     */
    body?: {
        [propertyName: string]: string;
    };
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientCreateCredentialDefinitionOptionalParams extends msRest.RequestOptionsBase {
    /**
     * Definition.
     */
    credentialDefinitionFromSchemaParameters?: CredentialDefinitionFromSchemaParameters;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientCreateSchemaOptionalParams extends msRest.RequestOptionsBase {
    /**
     * Schema details
     */
    schemaParameters?: SchemaParameters;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientCreateTenantOptionalParams extends msRest.RequestOptionsBase {
    /**
     * Configuration options for creating new tenant.
     */
    tenantParameters?: TenantParameters;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientListVerificationsForConnectionOptionalParams extends msRest.RequestOptionsBase {
    /**
     * The connection identifier.
     */
    connectionId?: string;
    /**
     * The definition identifier.
     */
    definitionId?: string;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientCreateVerificationOptionalParams extends msRest.RequestOptionsBase {
    /**
     * The create verification.
     */
    verificationParameters?: VerificationParameters;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientCreateVerificationDefinitionOptionalParams extends msRest.RequestOptionsBase {
    /**
     * The proof request.
     */
    proofRequest?: ProofRequest;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientCreateWebhookOptionalParams extends msRest.RequestOptionsBase {
    webhookParameters?: WebhookParameters;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientSendMessageOptionalParams extends msRest.RequestOptionsBase {
    basicMessageParameters?: BasicMessageParameters;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientCreateCredentialDefinitionForSchemaIdOptionalParams extends msRest.RequestOptionsBase {
    credentialDefinitionParameters?: CredentialDefinitionParameters;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientCreateVerificationPolicyOptionalParams extends msRest.RequestOptionsBase {
    /**
     * The verification policy parameters.
     */
    verificationPolicyParameters?: VerificationPolicyParameters;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientCreateVerificationFromParametersOptionalParams extends msRest.RequestOptionsBase {
    /**
     * The policy parameters.
     */
    verificationPolicyParameters?: VerificationPolicyParameters;
}
/**
 * Optional Parameters.
 */
export interface AgencyServiceClientSendVerificationFromParametersOptionalParams extends msRest.RequestOptionsBase {
    /**
     * The policy parameters.
     */
    verificationPolicyParameters?: VerificationPolicyParameters;
}
/**
 * Defines values for State.
 * Possible values include: 'Invited', 'Negotiating', 'Connected'
 * @readonly
 * @enum {string}
 */
export declare type State = 'Invited' | 'Negotiating' | 'Connected';
/**
 * Defines values for State1.
 * Possible values include: 'Offered', 'Requested', 'Issued', 'Rejected', 'Revoked'
 * @readonly
 * @enum {string}
 */
export declare type State1 = 'Offered' | 'Requested' | 'Issued' | 'Rejected' | 'Revoked';
/**
 * Defines values for Direction.
 * Possible values include: 'Incoming', 'Outgoing'
 * @readonly
 * @enum {string}
 */
export declare type Direction = 'Incoming' | 'Outgoing';
/**
 * Defines values for Direction1.
 * Possible values include: 'Incoming', 'Outgoing'
 * @readonly
 * @enum {string}
 */
export declare type Direction1 = 'Incoming' | 'Outgoing';
/**
 * Defines values for TransactionEndorsement.
 * Possible values include: 'Shared', 'Dedicated', 'Delegated'
 * @readonly
 * @enum {string}
 */
export declare type TransactionEndorsement = 'Shared' | 'Dedicated' | 'Delegated';
/**
 * Defines values for EndorserType.
 * Possible values include: 'Shared', 'Dedicated', 'Delegated'
 * @readonly
 * @enum {string}
 */
export declare type EndorserType = 'Shared' | 'Dedicated' | 'Delegated';
/**
 * Defines values for TransactionEndorsement1.
 * Possible values include: 'Shared', 'Dedicated', 'Delegated'
 * @readonly
 * @enum {string}
 */
export declare type TransactionEndorsement1 = 'Shared' | 'Dedicated' | 'Delegated';
/**
 * Defines values for State2.
 * Possible values include: 'Requested', 'Accepted', 'Rejected'
 * @readonly
 * @enum {string}
 */
export declare type State2 = 'Requested' | 'Accepted' | 'Rejected';
/**
 * Defines values for Type.
 * Possible values include: 'Notification', 'DelegatedEndorser'
 * @readonly
 * @enum {string}
 */
export declare type Type = 'Notification' | 'DelegatedEndorser';
/**
 * Defines values for Type1.
 * Possible values include: 'Notification', 'DelegatedEndorser'
 * @readonly
 * @enum {string}
 */
export declare type Type1 = 'Notification' | 'DelegatedEndorser';
/**
 * Defines values for State3.
 * Possible values include: 'Invited', 'Negotiating', 'Connected'
 * @readonly
 * @enum {string}
 */
export declare type State3 = 'Invited' | 'Negotiating' | 'Connected';
/**
 * Defines values for State4.
 * Possible values include: 'Offered', 'Requested', 'Issued', 'Rejected', 'Revoked'
 * @readonly
 * @enum {string}
 */
export declare type State4 = 'Offered' | 'Requested' | 'Issued' | 'Rejected' | 'Revoked';
/**
 * Contains response data for the uploadImage operation.
 */
export declare type UploadImageResponse = {
    /**
     * The parsed response body.
     */
    body: string;
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: string;
    };
};
/**
 * Contains response data for the listNetworks operation.
 */
export declare type ListNetworksResponse = Array<NetworkContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: NetworkContract[];
    };
};
/**
 * Contains response data for the listConnections operation.
 */
export declare type ListConnectionsResponse = Array<ConnectionContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: ConnectionContract[];
    };
};
/**
 * Contains response data for the createConnection operation.
 */
export declare type CreateConnectionResponse = ConnectionContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: ConnectionContract;
    };
};
/**
 * Contains response data for the getConnection operation.
 */
export declare type GetConnectionResponse = ConnectionContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: ConnectionContract;
    };
};
/**
 * Contains response data for the listCredentials operation.
 */
export declare type ListCredentialsResponse = Array<CredentialContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: CredentialContract[];
    };
};
/**
 * Contains response data for the createCredential operation.
 */
export declare type CreateCredentialResponse = CredentialContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: CredentialContract;
    };
};
/**
 * Contains response data for the getCredential operation.
 */
export declare type GetCredentialResponse = CredentialContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: CredentialContract;
    };
};
/**
 * Contains response data for the listCredentialDefinitions operation.
 */
export declare type ListCredentialDefinitionsResponse = Array<CredentialDefinitionContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: CredentialDefinitionContract[];
    };
};
/**
 * Contains response data for the createCredentialDefinition operation.
 */
export declare type CreateCredentialDefinitionResponse = CredentialDefinitionContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: CredentialDefinitionContract;
    };
};
/**
 * Contains response data for the getCredentialDefinition operation.
 */
export declare type GetCredentialDefinitionResponse = CredentialDefinitionContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: CredentialDefinitionContract;
    };
};
/**
 * Contains response data for the listSchemas operation.
 */
export declare type ListSchemasResponse = Array<SchemaRecord> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: SchemaRecord[];
    };
};
/**
 * Contains response data for the createSchema operation.
 */
export declare type CreateSchemaResponse = {
    /**
     * The parsed response body.
     */
    body: string;
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: string;
    };
};
/**
 * Contains response data for the listTenants operation.
 */
export declare type ListTenantsResponse = Array<TenantContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: TenantContract[];
    };
};
/**
 * Contains response data for the createTenant operation.
 */
export declare type CreateTenantResponse = TenantContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: TenantContract;
    };
};
/**
 * Contains response data for the getTenant operation.
 */
export declare type GetTenantResponse = TenantContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: TenantContract;
    };
};
/**
 * Contains response data for the listVerificationsForConnection operation.
 */
export declare type ListVerificationsForConnectionResponse = Array<VerificationContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationContract[];
    };
};
/**
 * Contains response data for the createVerification operation.
 */
export declare type CreateVerificationResponse = VerificationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationContract;
    };
};
/**
 * Contains response data for the getVerification operation.
 */
export declare type GetVerificationResponse = VerificationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationContract;
    };
};
/**
 * Contains response data for the getVerificationDefinition operation.
 */
export declare type GetVerificationDefinitionResponse = VerificationDefinitionContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationDefinitionContract;
    };
};
/**
 * Contains response data for the listVerificationDefinitions operation.
 */
export declare type ListVerificationDefinitionsResponse = Array<VerificationDefinitionContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationDefinitionContract[];
    };
};
/**
 * Contains response data for the createVerificationDefinition operation.
 */
export declare type CreateVerificationDefinitionResponse = VerificationDefinitionContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationDefinitionContract;
    };
};
/**
 * Contains response data for the listWebhooks operation.
 */
export declare type ListWebhooksResponse = Array<WebhookContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: WebhookContract[];
    };
};
/**
 * Contains response data for the createWebhook operation.
 */
export declare type CreateWebhookResponse = WebhookContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: WebhookContract;
    };
};
/**
 * Contains response data for the listMessages operation.
 */
export declare type ListMessagesResponse = Array<BasicMessageRecord> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: BasicMessageRecord[];
    };
};
/**
 * Contains response data for the getMessage operation.
 */
export declare type GetMessageResponse = BasicMessageContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: BasicMessageContract;
    };
};
/**
 * Contains response data for the getTransactionAuthorAgreement operation.
 */
export declare type GetTransactionAuthorAgreementResponse = NetworkTxnAgreementContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: NetworkTxnAgreementContract;
    };
};
/**
 * Contains response data for the createCredentialDefinitionForSchemaId operation.
 */
export declare type CreateCredentialDefinitionForSchemaIdResponse = CredentialDefinitionContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: CredentialDefinitionContract;
    };
};
/**
 * Contains response data for the getIssuerStatus operation.
 */
export declare type GetIssuerStatusResponse = IssuerStatusContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: IssuerStatusContract;
    };
};
/**
 * Contains response data for the verifyVerification operation.
 */
export declare type VerifyVerificationResponse = VerificationResult & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationResult;
    };
};
/**
 * Contains response data for the listVerificationPolicies operation.
 */
export declare type ListVerificationPoliciesResponse = Array<VerificationPolicyContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationPolicyContract[];
    };
};
/**
 * Contains response data for the createVerificationPolicy operation.
 */
export declare type CreateVerificationPolicyResponse = VerificationPolicyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationPolicyContract;
    };
};
/**
 * Contains response data for the getVerificationPolicy operation.
 */
export declare type GetVerificationPolicyResponse = VerificationPolicyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationPolicyContract;
    };
};
/**
 * Contains response data for the sendVerificationFromPolicy operation.
 */
export declare type SendVerificationFromPolicyResponse = VerificationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationContract;
    };
};
/**
 * Contains response data for the createVerificationFromPolicy operation.
 */
export declare type CreateVerificationFromPolicyResponse = VerificationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationContract;
    };
};
/**
 * Contains response data for the createVerificationFromParameters operation.
 */
export declare type CreateVerificationFromParametersResponse = VerificationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationContract;
    };
};
/**
 * Contains response data for the sendVerificationFromParameters operation.
 */
export declare type SendVerificationFromParametersResponse = VerificationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationContract;
    };
};
