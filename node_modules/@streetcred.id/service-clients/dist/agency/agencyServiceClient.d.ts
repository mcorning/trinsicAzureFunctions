import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { AgencyServiceClientContext } from "./agencyServiceClientContext";
declare class AgencyServiceClient extends AgencyServiceClientContext {
    /**
     * Initializes a new instance of the AgencyServiceClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials, options?: Models.AgencyServiceClientOptions);
    /**
     * Upload an image and return a URL with the static remote location
     * @summary Upload image
     * @param uploadedFiles
     * @param [options] The optional parameters
     * @returns Promise<Models.UploadImageResponse>
     */
    uploadImage(uploadedFiles: msRest.HttpRequestBody, options?: Models.AgencyServiceClientUploadImageOptionalParams): Promise<Models.UploadImageResponse>;
    /**
     * @param uploadedFiles
     * @param callback The callback
     */
    uploadImage(uploadedFiles: msRest.HttpRequestBody, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param uploadedFiles
     * @param options The optional parameters
     * @param callback The callback
     */
    uploadImage(uploadedFiles: msRest.HttpRequestBody, options: Models.AgencyServiceClientUploadImageOptionalParams, callback: msRest.ServiceCallback<string>): void;
    /**
     * Returns a list of available ledger networks. Some networks are available based on your
     * subscription.
     * @summary List available ledger networks
     * @param [options] The optional parameters
     * @returns Promise<Models.ListNetworksResponse>
     */
    listNetworks(options?: msRest.RequestOptionsBase): Promise<Models.ListNetworksResponse>;
    /**
     * @param callback The callback
     */
    listNetworks(callback: msRest.ServiceCallback<Models.NetworkContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listNetworks(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkContract[]>): void;
    /**
     * Retrieve a list of all connections. Optionally, list only connections in a specified state.
     * @summary List all connections
     * @param [options] The optional parameters
     * @returns Promise<Models.ListConnectionsResponse>
     */
    listConnections(options?: Models.AgencyServiceClientListConnectionsOptionalParams): Promise<Models.ListConnectionsResponse>;
    /**
     * @param callback The callback
     */
    listConnections(callback: msRest.ServiceCallback<Models.ConnectionContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listConnections(options: Models.AgencyServiceClientListConnectionsOptionalParams, callback: msRest.ServiceCallback<Models.ConnectionContract[]>): void;
    /**
     * Initiate a new connection by creating an invitation. The newly created connection record
     * will be in state 'Invited' until the other party has accepted the invitation.
     * The response body includes details about the newly creation connection
     * <br /><i>Please check the <a
     * href="https://docs.streetcred.id/docs/connections#creating-new-connection-invitation">documentation</a>
     * on how to present the invitation data to mobile clients using a QR code.</i>
     * @summary Create a new connection
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateConnectionResponse>
     */
    createConnection(options?: Models.AgencyServiceClientCreateConnectionOptionalParams): Promise<Models.CreateConnectionResponse>;
    /**
     * @param callback The callback
     */
    createConnection(callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    createConnection(options: Models.AgencyServiceClientCreateConnectionOptionalParams, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * Get the details of a connection (including invitation details).
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/connections#retrieving-connections-data">documentation</a>
     * on how to get connection by sending the connectionId.</i>
     * @summary Get a connection by connectionId
     * @param connectionId The connection identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetConnectionResponse>
     */
    getConnection(connectionId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetConnectionResponse>;
    /**
     * @param connectionId The connection identifier.
     * @param callback The callback
     */
    getConnection(connectionId: string, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * @param connectionId The connection identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    getConnection(connectionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * Delete a connection record
     * @summary Delete a connection record
     * @param connectionId Connection identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteConnection(connectionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param connectionId Connection identifier
     * @param callback The callback
     */
    deleteConnection(connectionId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param connectionId Connection identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteConnection(connectionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Lists the credentials.
     * @summary Lists the credentials.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListCredentialsResponse>
     */
    listCredentials(options?: Models.AgencyServiceClientListCredentialsOptionalParams): Promise<Models.ListCredentialsResponse>;
    /**
     * @param callback The callback
     */
    listCredentials(callback: msRest.ServiceCallback<Models.CredentialContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listCredentials(options: Models.AgencyServiceClientListCredentialsOptionalParams, callback: msRest.ServiceCallback<Models.CredentialContract[]>): void;
    /**
     * This will send a credential offer of the specified definitionId to the specified connectionId.
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/credentials#1-send-a-credential-offer">documentation</a>
     * on how to send credential offer.</i>
     * @summary Sends credential offer of the specified DefinitionId to the specified ConnectionId
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateCredentialResponse>
     */
    createCredential(options?: Models.AgencyServiceClientCreateCredentialOptionalParams): Promise<Models.CreateCredentialResponse>;
    /**
     * @param callback The callback
     */
    createCredential(callback: msRest.ServiceCallback<Models.CredentialContract>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    createCredential(options: Models.AgencyServiceClientCreateCredentialOptionalParams, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
    /**
     * Gets the credentials.
     * @summary Gets the credentials.
     * @param credentialId The credential identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetCredentialResponse>
     */
    getCredential(credentialId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCredentialResponse>;
    /**
     * @param credentialId The credential identifier.
     * @param callback The callback
     */
    getCredential(credentialId: string, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
    /**
     * @param credentialId The credential identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    getCredential(credentialId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
    /**
     * This simply needs the credential identifier.
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/credentials#3-issue-credential">documentation</a> on how
     * to issue a credential.</i>
     * @summary Issues the credential.
     * @param credentialId The credential identifier.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    issueCredential(credentialId: string, options?: Models.AgencyServiceClientIssueCredentialOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param credentialId The credential identifier.
     * @param callback The callback
     */
    issueCredential(credentialId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param credentialId The credential identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    issueCredential(credentialId: string, options: Models.AgencyServiceClientIssueCredentialOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * Revoke credential that was issued previously. Process of revocation will update the revocation
     * registry locally and on the ledger. Issued credentials can still participate in proof workflows
     * and be considered valid, but only if the verifying ignores the revocation trail.
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/credentials#revoke-a-credential">documentation</a> on how
     * to issue a credential.</i>
     * @summary Revokes an isused credential. If the credential definition doesn't support revocation,
     * the credential record
     * is removed.
     * @param credentialId Credential identifier.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    revokeCredential(credentialId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param credentialId Credential identifier.
     * @param callback The callback
     */
    revokeCredential(credentialId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param credentialId Credential identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    revokeCredential(credentialId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List all credential definitions by this issuer.
     * @summary List all credential definitions by this issuer.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListCredentialDefinitionsResponse>
     */
    listCredentialDefinitions(options?: msRest.RequestOptionsBase): Promise<Models.ListCredentialDefinitionsResponse>;
    /**
     * @param callback The callback
     */
    listCredentialDefinitions(callback: msRest.ServiceCallback<Models.CredentialDefinitionContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listCredentialDefinitions(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract[]>): void;
    /**
     * A credential definition is created and saved on your cloud agent.
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/credentials#create-credential-definitions">documentation</a>
     * on how to create new credential definition.</i>
     * @summary Create new credential definition and schema with the given parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateCredentialDefinitionResponse>
     */
    createCredentialDefinition(options?: Models.AgencyServiceClientCreateCredentialDefinitionOptionalParams): Promise<Models.CreateCredentialDefinitionResponse>;
    /**
     * @param callback The callback
     */
    createCredentialDefinition(callback: msRest.ServiceCallback<Models.CredentialDefinitionContract>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    createCredentialDefinition(options: Models.AgencyServiceClientCreateCredentialDefinitionOptionalParams, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract>): void;
    /**
     * Get the credential definition with the specified identifier.
     * @summary Get the credential definition with the specified identifier.
     * @param definitionId
     * @param [options] The optional parameters
     * @returns Promise<Models.GetCredentialDefinitionResponse>
     */
    getCredentialDefinition(definitionId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCredentialDefinitionResponse>;
    /**
     * @param definitionId
     * @param callback The callback
     */
    getCredentialDefinition(definitionId: string, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract>): void;
    /**
     * @param definitionId
     * @param options The optional parameters
     * @param callback The callback
     */
    getCredentialDefinition(definitionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract>): void;
    /**
     * List the schemas registered or used by this issuer.
     * @summary List the schemas registered or used by this issuer.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListSchemasResponse>
     */
    listSchemas(options?: msRest.RequestOptionsBase): Promise<Models.ListSchemasResponse>;
    /**
     * @param callback The callback
     */
    listSchemas(callback: msRest.ServiceCallback<Models.SchemaRecord[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listSchemas(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SchemaRecord[]>): void;
    /**
     * Register schema with the current agency tenant and write the schema
     * to the ledger using the tenant as issuer. This does not create credential definition.
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/credentials#create-schemas">documentation</a> on how to
     * create new schema.</i>
     * @summary Create new schema
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateSchemaResponse>
     */
    createSchema(options?: Models.AgencyServiceClientCreateSchemaOptionalParams): Promise<Models.CreateSchemaResponse>;
    /**
     * @param callback The callback
     */
    createSchema(callback: msRest.ServiceCallback<string>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    createSchema(options: Models.AgencyServiceClientCreateSchemaOptionalParams, callback: msRest.ServiceCallback<string>): void;
    /**
     * Get a collection of available tenants for the current authorization context.
     * @summary List available tenants
     * @param [options] The optional parameters
     * @returns Promise<Models.ListTenantsResponse>
     */
    listTenants(options?: msRest.RequestOptionsBase): Promise<Models.ListTenantsResponse>;
    /**
     * @param callback The callback
     */
    listTenants(callback: msRest.ServiceCallback<Models.TenantContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listTenants(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantContract[]>): void;
    /**
     * Create new tenant and setup a unique agency endpoint. The agency will be set as an issuer
     * @summary Create new tenant
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateTenantResponse>
     */
    createTenant(options?: Models.AgencyServiceClientCreateTenantOptionalParams): Promise<Models.CreateTenantResponse>;
    /**
     * @param callback The callback
     */
    createTenant(callback: msRest.ServiceCallback<Models.TenantContract>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    createTenant(options: Models.AgencyServiceClientCreateTenantOptionalParams, callback: msRest.ServiceCallback<Models.TenantContract>): void;
    /**
     * Returns the agent configuration
     * @summary Returns the agent configuration
     * @param tenantId
     * @param [options] The optional parameters
     * @returns Promise<Models.GetTenantResponse>
     */
    getTenant(tenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetTenantResponse>;
    /**
     * @param tenantId
     * @param callback The callback
     */
    getTenant(tenantId: string, callback: msRest.ServiceCallback<Models.TenantContract>): void;
    /**
     * @param tenantId
     * @param options The optional parameters
     * @param callback The callback
     */
    getTenant(tenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantContract>): void;
    /**
     * Permanently remove a tenant, including their wallet, endpoint registrations and all data.
     * All definitions, connections and credentials issued will be deleted.
     * This action cannot be reverted.
     * @summary Delete a tenant.
     * @param tenantId
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteTenant(tenantId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param tenantId
     * @param callback The callback
     */
    deleteTenant(tenantId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param tenantId
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteTenant(tenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Initiate a new connection by creating an invitation. The newly created connection record
     * will be in state 'Invited' until the other party has accepted the invitation.
     * The response body includes details about the newly creation connection
     * <br /><i>Please check the <a
     * href="https://docs.streetcred.id/docs/verifications#list-all-verifications-for-a-connection">documentation</a>
     * on how to list verification credentials by connection id.</i>
     * @summary Lists the verifications for connection.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListVerificationsForConnectionResponse>
     */
    listVerificationsForConnection(options?: Models.AgencyServiceClientListVerificationsForConnectionOptionalParams): Promise<Models.ListVerificationsForConnectionResponse>;
    /**
     * @param callback The callback
     */
    listVerificationsForConnection(callback: msRest.ServiceCallback<Models.VerificationContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listVerificationsForConnection(options: Models.AgencyServiceClientListVerificationsForConnectionOptionalParams, callback: msRest.ServiceCallback<Models.VerificationContract[]>): void;
    /**
     * This endpoint can be used to send a verification definition to a connection, which will create a
     * verification ID to track the response from the connection.
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/verifications#create-a-verification">documentation</a> on
     * how to create verification credentials.</i>
     *
     * If the parameter {connectionId} is not specified, this endpoint will create a connectionless
     * verification. A URL will be generated that can be shared with anonymous user.
     * @summary Creates the specified create verification.
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.CreateVerificationResponse>
     */
    createVerification(options?: Models.AgencyServiceClientCreateVerificationOptionalParams): Promise<Models.CreateVerificationResponse>;
    /**
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    createVerification(callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    createVerification(options: Models.AgencyServiceClientCreateVerificationOptionalParams, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/verifications#get-verification-by-identifier">documentation</a>
     * on how to list verification credentials by verification id.</i>
     * @summary Get the verification with the given identifier
     * @param verificationId The verification identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetVerificationResponse>
     */
    getVerification(verificationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetVerificationResponse>;
    /**
     * @param verificationId The verification identifier.
     * @param callback The callback
     */
    getVerification(verificationId: string, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param verificationId The verification identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    getVerification(verificationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * Delete Verification by Id
     * @summary Delete Verification by Id
     * @param verificationId
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteVerification(verificationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param verificationId
     * @param callback The callback
     */
    deleteVerification(verificationId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param verificationId
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteVerification(verificationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary GetVerificationDefinition
     * @param definitionId
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.GetVerificationDefinitionResponse>
     */
    getVerificationDefinition(definitionId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetVerificationDefinitionResponse>;
    /**
     * @param definitionId
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    getVerificationDefinition(definitionId: string, callback: msRest.ServiceCallback<Models.VerificationDefinitionContract>): void;
    /**
     * @param definitionId
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    getVerificationDefinition(definitionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationDefinitionContract>): void;
    /**
     * This will list all of the verification definitions that you have created with your organization.
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/verifications#list-all-verification-definitions">documentation</a>
     * on how to list verification definitions.</i>
     * @summary List all verification definitions.
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.ListVerificationDefinitionsResponse>
     */
    listVerificationDefinitions(options?: msRest.RequestOptionsBase): Promise<Models.ListVerificationDefinitionsResponse>;
    /**
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    listVerificationDefinitions(callback: msRest.ServiceCallback<Models.VerificationDefinitionContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    listVerificationDefinitions(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationDefinitionContract[]>): void;
    /**
     * A verification definition is created and saved on your cloud agent. You can discover your
     * definition based on the ID that is returned or the name.
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/verifications#create-a-verification-definition">documentation</a>
     * on how to create new verification definition.</i>
     * @summary Creates new verification definition.
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.CreateVerificationDefinitionResponse>
     */
    createVerificationDefinition(options?: Models.AgencyServiceClientCreateVerificationDefinitionOptionalParams): Promise<Models.CreateVerificationDefinitionResponse>;
    /**
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    createVerificationDefinition(callback: msRest.ServiceCallback<Models.VerificationDefinitionContract>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    createVerificationDefinition(options: Models.AgencyServiceClientCreateVerificationDefinitionOptionalParams, callback: msRest.ServiceCallback<Models.VerificationDefinitionContract>): void;
    /**
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/webhooks#list-registered-webhooks">documentation</a> on
     * how to list webhooks.</i>
     * @summary List all webhooks
     * @param [options] The optional parameters
     * @returns Promise<Models.ListWebhooksResponse>
     */
    listWebhooks(options?: msRest.RequestOptionsBase): Promise<Models.ListWebhooksResponse>;
    /**
     * @param callback The callback
     */
    listWebhooks(callback: msRest.ServiceCallback<Models.WebhookContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listWebhooks(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebhookContract[]>): void;
    /**
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/webhooks#create-a-notification-webhook">documentation</a>
     * on how to create a webhook.</i>
     * @summary Create new webhook
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateWebhookResponse>
     */
    createWebhook(options?: Models.AgencyServiceClientCreateWebhookOptionalParams): Promise<Models.CreateWebhookResponse>;
    /**
     * @param callback The callback
     */
    createWebhook(callback: msRest.ServiceCallback<Models.WebhookContract>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    createWebhook(options: Models.AgencyServiceClientCreateWebhookOptionalParams, callback: msRest.ServiceCallback<Models.WebhookContract>): void;
    /**
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/webhooks#remove-a-webhook">documentation</a> on how to
     * remove a webhook.</i>
     * @summary Remove registered webhook
     * @param webhookId
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    removeWebhook(webhookId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param webhookId
     * @param callback The callback
     */
    removeWebhook(webhookId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param webhookId
     * @param options The optional parameters
     * @param callback The callback
     */
    removeWebhook(webhookId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary SendMessage
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    sendMessage(options?: Models.AgencyServiceClientSendMessageOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param callback The callback
     */
    sendMessage(callback: msRest.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    sendMessage(options: Models.AgencyServiceClientSendMessageOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary ListMessages
     * @param connectionId
     * @param [options] The optional parameters
     * @returns Promise<Models.ListMessagesResponse>
     */
    listMessages(connectionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListMessagesResponse>;
    /**
     * @param connectionId
     * @param callback The callback
     */
    listMessages(connectionId: string, callback: msRest.ServiceCallback<Models.BasicMessageRecord[]>): void;
    /**
     * @param connectionId
     * @param options The optional parameters
     * @param callback The callback
     */
    listMessages(connectionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BasicMessageRecord[]>): void;
    /**
     * @summary GetMessage
     * @param messageId
     * @param [options] The optional parameters
     * @returns Promise<Models.GetMessageResponse>
     */
    getMessage(messageId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMessageResponse>;
    /**
     * @param messageId
     * @param callback The callback
     */
    getMessage(messageId: string, callback: msRest.ServiceCallback<Models.BasicMessageContract>): void;
    /**
     * @param messageId
     * @param options The optional parameters
     * @param callback The callback
     */
    getMessage(messageId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BasicMessageContract>): void;
    /**
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/webhooks#enable-or-disable-a-webhook">documentation</a> on
     * how to enable a webhook.</i>
     * @summary Enables a webhook
     * @param webhookId
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    enableWebhook(webhookId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param webhookId
     * @param callback The callback
     */
    enableWebhook(webhookId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param webhookId
     * @param options The optional parameters
     * @param callback The callback
     */
    enableWebhook(webhookId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/webhooks#enable-or-disable-a-webhook">documentation</a> on
     * how to disable a webhook.</i>
     * @summary Disables a webhook
     * @param webhookId
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    disableWebhook(webhookId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param webhookId
     * @param callback The callback
     */
    disableWebhook(webhookId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param webhookId
     * @param options The optional parameters
     * @param callback The callback
     */
    disableWebhook(webhookId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Return the latest transaction author agreement and acceptance methods if one
     * is set on the network with the specified {networkId}
     * @summary Return the latest transaction author agreement and acceptance methods if one
     * is set on the network with the specified {networkId}
     * @param networkId Network identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.GetTransactionAuthorAgreementResponse>
     */
    getTransactionAuthorAgreement(networkId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetTransactionAuthorAgreementResponse>;
    /**
     * @param networkId Network identifier
     * @param callback The callback
     */
    getTransactionAuthorAgreement(networkId: string, callback: msRest.ServiceCallback<Models.NetworkTxnAgreementContract>): void;
    /**
     * @param networkId Network identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    getTransactionAuthorAgreement(networkId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTxnAgreementContract>): void;
    /**
     * Accept the latest transaction author agreement on the specified network.
     * @summary Accept the latest transaction author agreement on the specified network.
     * @param tenantId
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    acceptTransactionAuthorAgreement(tenantId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param tenantId
     * @param callback The callback
     */
    acceptTransactionAuthorAgreement(tenantId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param tenantId
     * @param options The optional parameters
     * @param callback The callback
     */
    acceptTransactionAuthorAgreement(tenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * <i>Please check the <a
     * href="https://docs.streetcred.id/docs/credentials#from-schema">documentation</a> on how to
     * create new credential definition from schema id.</i>
     * @summary Create credential definition from existing schema identifier.
     * @param schemaId
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateCredentialDefinitionForSchemaIdResponse>
     */
    createCredentialDefinitionForSchemaId(schemaId: string, options?: Models.AgencyServiceClientCreateCredentialDefinitionForSchemaIdOptionalParams): Promise<Models.CreateCredentialDefinitionForSchemaIdResponse>;
    /**
     * @param schemaId
     * @param callback The callback
     */
    createCredentialDefinitionForSchemaId(schemaId: string, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract>): void;
    /**
     * @param schemaId
     * @param options The optional parameters
     * @param callback The callback
     */
    createCredentialDefinitionForSchemaId(schemaId: string, options: Models.AgencyServiceClientCreateCredentialDefinitionForSchemaIdOptionalParams, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract>): void;
    /**
     * If the tenant is configured with Dedicated endorsement, this
     * action will check if the issuer DID has the required ENDORSER role
     * on the configured ledger network.
     * Additionally, check the acceptance of the transaction
     * author agreement and return the text and version if acceptance
     * is required.
     * @summary Get the issuer status for the current tenant.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetIssuerStatusResponse>
     */
    getIssuerStatus(options?: msRest.RequestOptionsBase): Promise<Models.GetIssuerStatusResponse>;
    /**
     * @param callback The callback
     */
    getIssuerStatus(callback: msRest.ServiceCallback<Models.IssuerStatusContract>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getIssuerStatus(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IssuerStatusContract>): void;
    /**
     * Delete credential definition
     * @summary Delete credential definition
     * @param credentialDefinitionId
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteCredentialDefinition(credentialDefinitionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param credentialDefinitionId
     * @param callback The callback
     */
    deleteCredentialDefinition(credentialDefinitionId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param credentialDefinitionId
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteCredentialDefinition(credentialDefinitionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Delete Verification Definition by Id
     * @summary Delete Verification Definition by Id
     * @param verificationDefinitionId
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<msRest.RestResponse>
     */
    deleteVerificationDefinition(verificationDefinitionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param verificationDefinitionId
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    deleteVerificationDefinition(verificationDefinitionId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param verificationDefinitionId
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    deleteVerificationDefinition(verificationDefinitionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Execute verification on this record. This is an expensive action and is executed
     * by veryfing the proof againt the ledger data.
     * @summary Execute verification on this record. This is an expensive action and is executed
     * by veryfing the proof againt the ledger data.
     * @param verificationId Verification identifier
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.VerifyVerificationResponse>
     */
    verifyVerification(verificationId: string, options?: msRest.RequestOptionsBase): Promise<Models.VerifyVerificationResponse>;
    /**
     * @param verificationId Verification identifier
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    verifyVerification(verificationId: string, callback: msRest.ServiceCallback<Models.VerificationResult>): void;
    /**
     * @param verificationId Verification identifier
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    verifyVerification(verificationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationResult>): void;
    /**
     * Lists the verification policies.
     * @summary Lists the verification policies.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListVerificationPoliciesResponse>
     */
    listVerificationPolicies(options?: msRest.RequestOptionsBase): Promise<Models.ListVerificationPoliciesResponse>;
    /**
     * @param callback The callback
     */
    listVerificationPolicies(callback: msRest.ServiceCallback<Models.VerificationPolicyContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listVerificationPolicies(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationPolicyContract[]>): void;
    /**
     * Creates the verification policy.
     * @summary Creates the verification policy.
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateVerificationPolicyResponse>
     */
    createVerificationPolicy(options?: Models.AgencyServiceClientCreateVerificationPolicyOptionalParams): Promise<Models.CreateVerificationPolicyResponse>;
    /**
     * @param callback The callback
     */
    createVerificationPolicy(callback: msRest.ServiceCallback<Models.VerificationPolicyContract>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    createVerificationPolicy(options: Models.AgencyServiceClientCreateVerificationPolicyOptionalParams, callback: msRest.ServiceCallback<Models.VerificationPolicyContract>): void;
    /**
     * Gets the verification policy.
     * @summary Gets the verification policy.
     * @param policyId The verification policy identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetVerificationPolicyResponse>
     */
    getVerificationPolicy(policyId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetVerificationPolicyResponse>;
    /**
     * @param policyId The verification policy identifier.
     * @param callback The callback
     */
    getVerificationPolicy(policyId: string, callback: msRest.ServiceCallback<Models.VerificationPolicyContract>): void;
    /**
     * @param policyId The verification policy identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    getVerificationPolicy(policyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationPolicyContract>): void;
    /**
     * Deletes the verification policy.
     * @summary Deletes the verification policy.
     * @param policyId The policy identifier.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteVerificationPolicy(policyId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param policyId The policy identifier.
     * @param callback The callback
     */
    deleteVerificationPolicy(policyId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param policyId The policy identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteVerificationPolicy(policyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * If 'definitionId' is null, it will remove all revoked records for all credential definitions
     * @summary Removes all credential records with status 'Revoked' for the given credential
     * definition
     * @param definitionId The definition identifier.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    purgeCredentials(definitionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param definitionId The definition identifier.
     * @param callback The callback
     */
    purgeCredentials(definitionId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param definitionId The definition identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    purgeCredentials(definitionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Send a verification to the specified connection from existing policy
     * @summary Send a verification to the specified connection from existing policy
     * @param connectionId The connection identifier.
     * @param policyId The policy identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.SendVerificationFromPolicyResponse>
     */
    sendVerificationFromPolicy(connectionId: string, policyId: string, options?: msRest.RequestOptionsBase): Promise<Models.SendVerificationFromPolicyResponse>;
    /**
     * @param connectionId The connection identifier.
     * @param policyId The policy identifier.
     * @param callback The callback
     */
    sendVerificationFromPolicy(connectionId: string, policyId: string, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param connectionId The connection identifier.
     * @param policyId The policy identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    sendVerificationFromPolicy(connectionId: string, policyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * Connectionless transport uses URLs that can be shared with the user over any
     * existing transport (email, SMS, web).
     * @summary Create a verification from existing policy used for connectionless transport.
     * @param policyId The policy identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateVerificationFromPolicyResponse>
     */
    createVerificationFromPolicy(policyId: string, options?: msRest.RequestOptionsBase): Promise<Models.CreateVerificationFromPolicyResponse>;
    /**
     * @param policyId The policy identifier.
     * @param callback The callback
     */
    createVerificationFromPolicy(policyId: string, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param policyId The policy identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    createVerificationFromPolicy(policyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * Connectionless transport uses URLs that can be shared with the user over any
     * existing transport (email, SMS, web).
     * @summary Create a verification from parameters used for connectionless transport.
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateVerificationFromParametersResponse>
     */
    createVerificationFromParameters(options?: Models.AgencyServiceClientCreateVerificationFromParametersOptionalParams): Promise<Models.CreateVerificationFromParametersResponse>;
    /**
     * @param callback The callback
     */
    createVerificationFromParameters(callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    createVerificationFromParameters(options: Models.AgencyServiceClientCreateVerificationFromParametersOptionalParams, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @summary Health
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    health(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param callback The callback
     */
    health(callback: msRest.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    health(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Send a verification to the speicified connection from parameters
     * @summary Send a verification to the speicified connection from parameters
     * @param connectionId The connection identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.SendVerificationFromParametersResponse>
     */
    sendVerificationFromParameters(connectionId: string, options?: Models.AgencyServiceClientSendVerificationFromParametersOptionalParams): Promise<Models.SendVerificationFromParametersResponse>;
    /**
     * @param connectionId The connection identifier.
     * @param callback The callback
     */
    sendVerificationFromParameters(connectionId: string, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param connectionId The connection identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    sendVerificationFromParameters(connectionId: string, options: Models.AgencyServiceClientSendVerificationFromParametersOptionalParams, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
}
export { AgencyServiceClient, AgencyServiceClientContext, Models as AgencyServiceModels, Mappers as AgencyServiceMappers };
