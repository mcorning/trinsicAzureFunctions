"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var msRest = require("@azure/ms-rest-js");
var Models = require("./models");
exports.AgencyServiceModels = Models;
var Mappers = require("./models/mappers");
exports.AgencyServiceMappers = Mappers;
var Parameters = require("./models/parameters");
var agencyServiceClientContext_1 = require("./agencyServiceClientContext");
exports.AgencyServiceClientContext = agencyServiceClientContext_1.AgencyServiceClientContext;
var AgencyServiceClient = /** @class */ (function (_super) {
    __extends(AgencyServiceClient, _super);
    /**
     * Initializes a new instance of the AgencyServiceClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    function AgencyServiceClient(credentials, options) {
        return _super.call(this, credentials, options) || this;
    }
    AgencyServiceClient.prototype.uploadImage = function (uploadedFiles, options, callback) {
        return this.sendOperationRequest({
            uploadedFiles: uploadedFiles,
            options: options
        }, uploadImageOperationSpec, callback);
    };
    AgencyServiceClient.prototype.listNetworks = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listNetworksOperationSpec, callback);
    };
    AgencyServiceClient.prototype.listConnections = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listConnectionsOperationSpec, callback);
    };
    AgencyServiceClient.prototype.createConnection = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, createConnectionOperationSpec, callback);
    };
    AgencyServiceClient.prototype.getConnection = function (connectionId, options, callback) {
        return this.sendOperationRequest({
            connectionId: connectionId,
            options: options
        }, getConnectionOperationSpec, callback);
    };
    AgencyServiceClient.prototype.deleteConnection = function (connectionId, options, callback) {
        return this.sendOperationRequest({
            connectionId: connectionId,
            options: options
        }, deleteConnectionOperationSpec, callback);
    };
    AgencyServiceClient.prototype.listCredentials = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listCredentialsOperationSpec, callback);
    };
    AgencyServiceClient.prototype.createCredential = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, createCredentialOperationSpec, callback);
    };
    AgencyServiceClient.prototype.getCredential = function (credentialId, options, callback) {
        return this.sendOperationRequest({
            credentialId: credentialId,
            options: options
        }, getCredentialOperationSpec, callback);
    };
    AgencyServiceClient.prototype.issueCredential = function (credentialId, options, callback) {
        return this.sendOperationRequest({
            credentialId: credentialId,
            options: options
        }, issueCredentialOperationSpec, callback);
    };
    AgencyServiceClient.prototype.revokeCredential = function (credentialId, options, callback) {
        return this.sendOperationRequest({
            credentialId: credentialId,
            options: options
        }, revokeCredentialOperationSpec, callback);
    };
    AgencyServiceClient.prototype.listCredentialDefinitions = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listCredentialDefinitionsOperationSpec, callback);
    };
    AgencyServiceClient.prototype.createCredentialDefinition = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, createCredentialDefinitionOperationSpec, callback);
    };
    AgencyServiceClient.prototype.getCredentialDefinition = function (definitionId, options, callback) {
        return this.sendOperationRequest({
            definitionId: definitionId,
            options: options
        }, getCredentialDefinitionOperationSpec, callback);
    };
    AgencyServiceClient.prototype.listSchemas = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listSchemasOperationSpec, callback);
    };
    AgencyServiceClient.prototype.createSchema = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, createSchemaOperationSpec, callback);
    };
    AgencyServiceClient.prototype.listTenants = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listTenantsOperationSpec, callback);
    };
    AgencyServiceClient.prototype.createTenant = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, createTenantOperationSpec, callback);
    };
    AgencyServiceClient.prototype.getTenant = function (tenantId, options, callback) {
        return this.sendOperationRequest({
            tenantId: tenantId,
            options: options
        }, getTenantOperationSpec, callback);
    };
    AgencyServiceClient.prototype.deleteTenant = function (tenantId, options, callback) {
        return this.sendOperationRequest({
            tenantId: tenantId,
            options: options
        }, deleteTenantOperationSpec, callback);
    };
    AgencyServiceClient.prototype.listVerificationsForConnection = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listVerificationsForConnectionOperationSpec, callback);
    };
    AgencyServiceClient.prototype.createVerification = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, createVerificationOperationSpec, callback);
    };
    AgencyServiceClient.prototype.getVerification = function (verificationId, options, callback) {
        return this.sendOperationRequest({
            verificationId: verificationId,
            options: options
        }, getVerificationOperationSpec, callback);
    };
    AgencyServiceClient.prototype.deleteVerification = function (verificationId, options, callback) {
        return this.sendOperationRequest({
            verificationId: verificationId,
            options: options
        }, deleteVerificationOperationSpec, callback);
    };
    AgencyServiceClient.prototype.getVerificationDefinition = function (definitionId, options, callback) {
        return this.sendOperationRequest({
            definitionId: definitionId,
            options: options
        }, getVerificationDefinitionOperationSpec, callback);
    };
    AgencyServiceClient.prototype.listVerificationDefinitions = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listVerificationDefinitionsOperationSpec, callback);
    };
    AgencyServiceClient.prototype.createVerificationDefinition = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, createVerificationDefinitionOperationSpec, callback);
    };
    AgencyServiceClient.prototype.listWebhooks = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listWebhooksOperationSpec, callback);
    };
    AgencyServiceClient.prototype.createWebhook = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, createWebhookOperationSpec, callback);
    };
    AgencyServiceClient.prototype.removeWebhook = function (webhookId, options, callback) {
        return this.sendOperationRequest({
            webhookId: webhookId,
            options: options
        }, removeWebhookOperationSpec, callback);
    };
    AgencyServiceClient.prototype.sendMessage = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, sendMessageOperationSpec, callback);
    };
    AgencyServiceClient.prototype.listMessages = function (connectionId, options, callback) {
        return this.sendOperationRequest({
            connectionId: connectionId,
            options: options
        }, listMessagesOperationSpec, callback);
    };
    AgencyServiceClient.prototype.getMessage = function (messageId, options, callback) {
        return this.sendOperationRequest({
            messageId: messageId,
            options: options
        }, getMessageOperationSpec, callback);
    };
    AgencyServiceClient.prototype.enableWebhook = function (webhookId, options, callback) {
        return this.sendOperationRequest({
            webhookId: webhookId,
            options: options
        }, enableWebhookOperationSpec, callback);
    };
    AgencyServiceClient.prototype.disableWebhook = function (webhookId, options, callback) {
        return this.sendOperationRequest({
            webhookId: webhookId,
            options: options
        }, disableWebhookOperationSpec, callback);
    };
    AgencyServiceClient.prototype.getTransactionAuthorAgreement = function (networkId, options, callback) {
        return this.sendOperationRequest({
            networkId: networkId,
            options: options
        }, getTransactionAuthorAgreementOperationSpec, callback);
    };
    AgencyServiceClient.prototype.acceptTransactionAuthorAgreement = function (tenantId, options, callback) {
        return this.sendOperationRequest({
            tenantId: tenantId,
            options: options
        }, acceptTransactionAuthorAgreementOperationSpec, callback);
    };
    AgencyServiceClient.prototype.createCredentialDefinitionForSchemaId = function (schemaId, options, callback) {
        return this.sendOperationRequest({
            schemaId: schemaId,
            options: options
        }, createCredentialDefinitionForSchemaIdOperationSpec, callback);
    };
    AgencyServiceClient.prototype.getIssuerStatus = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getIssuerStatusOperationSpec, callback);
    };
    AgencyServiceClient.prototype.deleteCredentialDefinition = function (credentialDefinitionId, options, callback) {
        return this.sendOperationRequest({
            credentialDefinitionId: credentialDefinitionId,
            options: options
        }, deleteCredentialDefinitionOperationSpec, callback);
    };
    AgencyServiceClient.prototype.deleteVerificationDefinition = function (verificationDefinitionId, options, callback) {
        return this.sendOperationRequest({
            verificationDefinitionId: verificationDefinitionId,
            options: options
        }, deleteVerificationDefinitionOperationSpec, callback);
    };
    AgencyServiceClient.prototype.verifyVerification = function (verificationId, options, callback) {
        return this.sendOperationRequest({
            verificationId: verificationId,
            options: options
        }, verifyVerificationOperationSpec, callback);
    };
    AgencyServiceClient.prototype.listVerificationPolicies = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listVerificationPoliciesOperationSpec, callback);
    };
    AgencyServiceClient.prototype.createVerificationPolicy = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, createVerificationPolicyOperationSpec, callback);
    };
    AgencyServiceClient.prototype.getVerificationPolicy = function (policyId, options, callback) {
        return this.sendOperationRequest({
            policyId: policyId,
            options: options
        }, getVerificationPolicyOperationSpec, callback);
    };
    AgencyServiceClient.prototype.deleteVerificationPolicy = function (policyId, options, callback) {
        return this.sendOperationRequest({
            policyId: policyId,
            options: options
        }, deleteVerificationPolicyOperationSpec, callback);
    };
    AgencyServiceClient.prototype.purgeCredentials = function (definitionId, options, callback) {
        return this.sendOperationRequest({
            definitionId: definitionId,
            options: options
        }, purgeCredentialsOperationSpec, callback);
    };
    AgencyServiceClient.prototype.sendVerificationFromPolicy = function (connectionId, policyId, options, callback) {
        return this.sendOperationRequest({
            connectionId: connectionId,
            policyId: policyId,
            options: options
        }, sendVerificationFromPolicyOperationSpec, callback);
    };
    AgencyServiceClient.prototype.createVerificationFromPolicy = function (policyId, options, callback) {
        return this.sendOperationRequest({
            policyId: policyId,
            options: options
        }, createVerificationFromPolicyOperationSpec, callback);
    };
    AgencyServiceClient.prototype.createVerificationFromParameters = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, createVerificationFromParametersOperationSpec, callback);
    };
    AgencyServiceClient.prototype.health = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, healthOperationSpec, callback);
    };
    AgencyServiceClient.prototype.sendVerificationFromParameters = function (connectionId, options, callback) {
        return this.sendOperationRequest({
            connectionId: connectionId,
            options: options
        }, sendVerificationFromParametersOperationSpec, callback);
    };
    return AgencyServiceClient;
}(agencyServiceClientContext_1.AgencyServiceClientContext));
exports.AgencyServiceClient = AgencyServiceClient;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var uploadImageOperationSpec = {
    httpMethod: "POST",
    path: "agency/v1/common/upload",
    formDataParameters: [
        Parameters.uploadedFiles,
        Parameters.filename,
        Parameters.contentType
    ],
    contentType: "multipart/form-data",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var listNetworksOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/common/networks",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkContract"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var listConnectionsOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/connections",
    queryParameters: [
        Parameters.state
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectionContract"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createConnectionOperationSpec = {
    httpMethod: "POST",
    path: "agency/v1/connections",
    requestBody: {
        parameterPath: [
            "options",
            "connectionInvitationParameters"
        ],
        mapper: Mappers.ConnectionInvitationParameters
    },
    responses: {
        200: {
            bodyMapper: Mappers.ConnectionContract
        },
        default: {}
    },
    serializer: serializer
};
var getConnectionOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/connections/{connectionId}",
    urlParameters: [
        Parameters.connectionId0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ConnectionContract
        },
        default: {}
    },
    serializer: serializer
};
var deleteConnectionOperationSpec = {
    httpMethod: "DELETE",
    path: "agency/v1/connections/{connectionId}",
    urlParameters: [
        Parameters.connectionId0
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var listCredentialsOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/credentials",
    queryParameters: [
        Parameters.connectionId1,
        Parameters.state,
        Parameters.definitionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CredentialContract"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createCredentialOperationSpec = {
    httpMethod: "POST",
    path: "agency/v1/credentials",
    requestBody: {
        parameterPath: [
            "options",
            "credentialOfferParameters"
        ],
        mapper: Mappers.CredentialOfferParameters
    },
    responses: {
        200: {
            bodyMapper: Mappers.CredentialContract
        },
        default: {}
    },
    serializer: serializer
};
var getCredentialOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/credentials/{credentialId}",
    urlParameters: [
        Parameters.credentialId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CredentialContract
        },
        default: {}
    },
    serializer: serializer
};
var issueCredentialOperationSpec = {
    httpMethod: "PUT",
    path: "agency/v1/credentials/{credentialId}",
    urlParameters: [
        Parameters.credentialId
    ],
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: {
            serializedName: "body",
            type: {
                name: "Dictionary",
                value: {
                    type: {
                        name: "String"
                    }
                }
            }
        }
    },
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var revokeCredentialOperationSpec = {
    httpMethod: "DELETE",
    path: "agency/v1/credentials/{credentialId}",
    urlParameters: [
        Parameters.credentialId
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var listCredentialDefinitionsOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/definitions/credentials",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CredentialDefinitionContract"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createCredentialDefinitionOperationSpec = {
    httpMethod: "POST",
    path: "agency/v1/definitions/credentials",
    requestBody: {
        parameterPath: [
            "options",
            "credentialDefinitionFromSchemaParameters"
        ],
        mapper: Mappers.CredentialDefinitionFromSchemaParameters
    },
    responses: {
        200: {
            bodyMapper: Mappers.CredentialDefinitionContract
        },
        default: {}
    },
    serializer: serializer
};
var getCredentialDefinitionOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/definitions/credentials/{definitionId}",
    urlParameters: [
        Parameters.definitionId1
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CredentialDefinitionContract
        },
        default: {}
    },
    serializer: serializer
};
var listSchemasOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/definitions/schemas",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SchemaRecord"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createSchemaOperationSpec = {
    httpMethod: "POST",
    path: "agency/v1/definitions/schemas",
    requestBody: {
        parameterPath: [
            "options",
            "schemaParameters"
        ],
        mapper: Mappers.SchemaParameters
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var listTenantsOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/tenants",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TenantContract"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createTenantOperationSpec = {
    httpMethod: "POST",
    path: "agency/v1/tenants",
    requestBody: {
        parameterPath: [
            "options",
            "tenantParameters"
        ],
        mapper: Mappers.TenantParameters
    },
    responses: {
        200: {
            bodyMapper: Mappers.TenantContract
        },
        default: {}
    },
    serializer: serializer
};
var getTenantOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/tenants/{tenantId}",
    urlParameters: [
        Parameters.tenantId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TenantContract
        },
        default: {}
    },
    serializer: serializer
};
var deleteTenantOperationSpec = {
    httpMethod: "DELETE",
    path: "agency/v1/tenants/{tenantId}",
    urlParameters: [
        Parameters.tenantId
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var listVerificationsForConnectionOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/verifications",
    queryParameters: [
        Parameters.connectionId1,
        Parameters.definitionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VerificationContract"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createVerificationOperationSpec = {
    httpMethod: "POST",
    path: "agency/v1/verifications",
    requestBody: {
        parameterPath: [
            "options",
            "verificationParameters"
        ],
        mapper: Mappers.VerificationParameters
    },
    responses: {
        200: {
            bodyMapper: Mappers.VerificationContract
        },
        default: {}
    },
    serializer: serializer
};
var getVerificationOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/verifications/{verificationId}",
    urlParameters: [
        Parameters.verificationId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VerificationContract
        },
        default: {}
    },
    serializer: serializer
};
var deleteVerificationOperationSpec = {
    httpMethod: "DELETE",
    path: "agency/v1/verifications/{verificationId}",
    urlParameters: [
        Parameters.verificationId
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var getVerificationDefinitionOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/definitions/verifications/{definitionId}",
    urlParameters: [
        Parameters.definitionId1
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VerificationDefinitionContract
        },
        default: {}
    },
    serializer: serializer
};
var listVerificationDefinitionsOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/definitions/verifications",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VerificationDefinitionContract"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createVerificationDefinitionOperationSpec = {
    httpMethod: "POST",
    path: "agency/v1/definitions/verifications",
    requestBody: {
        parameterPath: [
            "options",
            "proofRequest"
        ],
        mapper: Mappers.ProofRequest
    },
    responses: {
        200: {
            bodyMapper: Mappers.VerificationDefinitionContract
        },
        default: {}
    },
    serializer: serializer
};
var listWebhooksOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/webhooks",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "WebhookContract"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createWebhookOperationSpec = {
    httpMethod: "POST",
    path: "agency/v1/webhooks",
    requestBody: {
        parameterPath: [
            "options",
            "webhookParameters"
        ],
        mapper: Mappers.WebhookParameters
    },
    responses: {
        200: {
            bodyMapper: Mappers.WebhookContract
        },
        default: {}
    },
    serializer: serializer
};
var removeWebhookOperationSpec = {
    httpMethod: "DELETE",
    path: "agency/v1/webhooks/{webhookId}",
    urlParameters: [
        Parameters.webhookId
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var sendMessageOperationSpec = {
    httpMethod: "POST",
    path: "agency/v1/messages",
    requestBody: {
        parameterPath: [
            "options",
            "basicMessageParameters"
        ],
        mapper: Mappers.BasicMessageParameters
    },
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var listMessagesOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/messages/connection/{connectionId}",
    urlParameters: [
        Parameters.connectionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BasicMessageRecord"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getMessageOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/messages/{messageId}",
    urlParameters: [
        Parameters.messageId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BasicMessageContract
        },
        default: {}
    },
    serializer: serializer
};
var enableWebhookOperationSpec = {
    httpMethod: "PUT",
    path: "agency/v1/webhooks/{webhookId}/enable",
    urlParameters: [
        Parameters.webhookId
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var disableWebhookOperationSpec = {
    httpMethod: "PUT",
    path: "agency/v1/webhooks/{webhookId}/disable",
    urlParameters: [
        Parameters.webhookId
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var getTransactionAuthorAgreementOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/common/networks/{networkId}/txnAuthorAgreement",
    urlParameters: [
        Parameters.networkId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.NetworkTxnAgreementContract
        },
        default: {}
    },
    serializer: serializer
};
var acceptTransactionAuthorAgreementOperationSpec = {
    httpMethod: "PUT",
    path: "agency/v1/common/networks/{tenantId}/txnAuthorAgreement",
    urlParameters: [
        Parameters.tenantId
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var createCredentialDefinitionForSchemaIdOperationSpec = {
    httpMethod: "POST",
    path: "agency/v1/definitions/credentials/{schemaId}",
    urlParameters: [
        Parameters.schemaId
    ],
    requestBody: {
        parameterPath: [
            "options",
            "credentialDefinitionParameters"
        ],
        mapper: Mappers.CredentialDefinitionParameters
    },
    responses: {
        200: {
            bodyMapper: Mappers.CredentialDefinitionContract
        },
        default: {}
    },
    serializer: serializer
};
var getIssuerStatusOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/tenants/issuerStatus",
    responses: {
        200: {
            bodyMapper: Mappers.IssuerStatusContract
        },
        default: {}
    },
    serializer: serializer
};
var deleteCredentialDefinitionOperationSpec = {
    httpMethod: "DELETE",
    path: "agency/v1/definitions/credentials/{credentialDefinitionId}",
    urlParameters: [
        Parameters.credentialDefinitionId
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var deleteVerificationDefinitionOperationSpec = {
    httpMethod: "DELETE",
    path: "agency/v1/definitions/verifications/{verificationDefinitionId}",
    urlParameters: [
        Parameters.verificationDefinitionId
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var verifyVerificationOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/verifications/{verificationId}/verify",
    urlParameters: [
        Parameters.verificationId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VerificationResult
        },
        default: {}
    },
    serializer: serializer
};
var listVerificationPoliciesOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/verificationPolicies",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VerificationPolicyContract"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createVerificationPolicyOperationSpec = {
    httpMethod: "POST",
    path: "agency/v1/verificationPolicies",
    requestBody: {
        parameterPath: [
            "options",
            "verificationPolicyParameters"
        ],
        mapper: Mappers.VerificationPolicyParameters
    },
    responses: {
        200: {
            bodyMapper: Mappers.VerificationPolicyContract
        },
        default: {}
    },
    serializer: serializer
};
var getVerificationPolicyOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/verificationPolicies/{policyId}",
    urlParameters: [
        Parameters.policyId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VerificationPolicyContract
        },
        default: {}
    },
    serializer: serializer
};
var deleteVerificationPolicyOperationSpec = {
    httpMethod: "DELETE",
    path: "agency/v1/verificationPolicies/{policyId}",
    urlParameters: [
        Parameters.policyId
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var purgeCredentialsOperationSpec = {
    httpMethod: "DELETE",
    path: "agency/v1/credentials/purge/{definitionId}",
    urlParameters: [
        Parameters.definitionId1
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var sendVerificationFromPolicyOperationSpec = {
    httpMethod: "PUT",
    path: "agency/v1/verifications/policy/{policyId}/connections/{connectionId}",
    urlParameters: [
        Parameters.connectionId0,
        Parameters.policyId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VerificationContract
        },
        default: {}
    },
    serializer: serializer
};
var createVerificationFromPolicyOperationSpec = {
    httpMethod: "PUT",
    path: "agency/v1/verifications/policy/{policyId}",
    urlParameters: [
        Parameters.policyId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VerificationContract
        },
        default: {}
    },
    serializer: serializer
};
var createVerificationFromParametersOperationSpec = {
    httpMethod: "POST",
    path: "agency/v1/verifications/policy",
    requestBody: {
        parameterPath: [
            "options",
            "verificationPolicyParameters"
        ],
        mapper: Mappers.VerificationPolicyParameters
    },
    responses: {
        200: {
            bodyMapper: Mappers.VerificationContract
        },
        default: {}
    },
    serializer: serializer
};
var healthOperationSpec = {
    httpMethod: "GET",
    path: "agency/v1/health",
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var sendVerificationFromParametersOperationSpec = {
    httpMethod: "POST",
    path: "agency/v1/verifications/policy/connections/{connectionId}",
    urlParameters: [
        Parameters.connectionId0
    ],
    requestBody: {
        parameterPath: [
            "options",
            "verificationPolicyParameters"
        ],
        mapper: Mappers.VerificationPolicyParameters
    },
    responses: {
        200: {
            bodyMapper: Mappers.VerificationContract
        },
        default: {}
    },
    serializer: serializer
};
